 #include <bits/stdc++.h>
using namespace std;
struct coordinates
{
    int x, y;
};

coordinates p0;


coordinates the_point_to_check_now(stack<coordinates> &S)
{
    coordinates p = S.top();
    S.pop();
    coordinates res = S.top();
    S.push(p);
    return res;
}


int swap(coordinates &p1, coordinates &p2)
{
    coordinates temp = p1;
    p1 = p2;
    p2 = temp;
}

int distance_sq(coordinates p1, coordinates p2)
{
    return (p1.x - p2.x)*(p1.x - p2.x) +
          (p1.y - p2.y)*(p1.y - p2.y);
}

int clockwise_anticlockwise(coordinates p, coordinates q, coordinates r)
{
    int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);

    if (val == 0) return 0;
    return (val > 0)? 1: 2;
}

int compare(const void *vp1, const void *vp2)
{
   coordinates *p1 = (coordinates *)vp1;
   coordinates *p2 = (coordinates *)vp2;


   int o = clockwise_anticlockwise(p0, *p1, *p2);
   if (o == 0)
     return (distance_sq(p0, *p2) >= distance_sq(p0, *p1))? -1 : 1;

   return (o == 2)? -1: 1;
}

void convexHull(coordinates points[], int n)
{

   int ymin = points[0].y, min = 0;
   for (int i = 1; i < n; i++)
   {
     int y = points[i].y;


     if ((y < ymin) || (ymin == y &&
         points[i].x < points[min].x))
        ymin = points[i].y, min = i;
   }

   swap(points[0], points[min]);


   p0 = points[0];
   qsort(&points[1], n-1, sizeof(coordinates), compare);


   int m = 1;
   for (int i=1; i<n; i++)
   {

       while (i < n-1 && clockwise_anticlockwise(p0, points[i],
                                    points[i+1]) == 0)
          i++;


       points[m] = points[i];
       m++;
   }

   if (m < 3) return;

   stack<coordinates> S;
   S.push(points[0]);
   S.push(points[1]);
   S.push(points[2]);


   for (int i = 3; i < m; i++)
   {

      while (clockwise_anticlockwise(the_point_to_check_now(S), S.top(), points[i]) != 2)
         S.pop();
      S.push(points[i]);
   }


   while (!S.empty())
   {
       coordinates p = S.top();
       cout << "(" << p.x << ", " << p.y <<")" << endl;
       S.pop();
   }
}


int main()
{
    int n ;
    cout<<"enter the number of points";
    cin>>n;
    coordinates points[n];
    for(int i=0;i<n;i++)
      cin>>points[i].x>>points[i].y;
    convexHull(points, n);
    return 0;
}
