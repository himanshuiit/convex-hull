#include<bits/stdc++.h>
using namespace std;

struct space_marking
{
	int x;
	int y;
};

bool orientation(space_marking start, space_marking mid, space_marking end_point)
{
    int val = (mid.y - start.y)*(end_point.x - mid.x) - (mid.x - start.x)*(end_point.y - mid.y);

	 if (val < 0)
        return 1;
    else
		return 0;
}

void answer(vector<space_marking> ar)
{
	for(int i=0;i<ar.size();i++)
	{
		cout<<"("<<ar[i].x<<","<<ar[i].y<<")  ";
	}
	cout<<""""<<"\n";
}

vector<space_marking> taking_answer(space_marking A, space_marking B, vector<space_marking> points)
{
	vector<space_marking> random;

	for(int i=0;i<points.size();i++)
	{
		if(orientation(A,B,points[i]))
			random.push_back(points[i]); //Finding all points lying on left side of line joining A and B
	}

	return random;
}

void quick_hull(vector<space_marking> points, space_marking A, space_marking B)
{
	if(points.size()==0) //Checking if no point lies in other region
		return;

	float dist = 0,k;
	int ans;

	for(int i=0;i<points.size();i++)
	{
		int x = points[i].x;
		int y = points[i].y;

		k = abs((B.y-A.y)*x-(B.x-A.x)*y+B.x*A.y-B.y*A.x)/sqrt(pow(B.y-A.y,2)+pow(B.x-A.x,2)); //Finding the perpendicular distance from line

		if(k>dist)
		{
			dist = k;
			ans = i; //Storing the index of space_marking with maximum distance from the line
		}
	}

	cout<<"selected_array_points of space_marking are ("<<points[ans].x<<","<<points[ans].y<<") "<<"\n";

	vector<space_marking> points1 = taking_answer(A,points[ans],points);
	vector<space_marking> points2 = taking_answer(points[ans],B,points);

	//Finding points for two different regions and then finding their convex hull

	quick_hull(points1,A,points[ans]);
	quick_hull(points2,points[ans],B);
}

int main()
{
	int n;
	cout<<"enter the number of points ";
	cin>>n;
	vector<space_marking> selected_array_points(n);
	for(int i=0;i<n;i++)
	{
 
		cin>>selected_array_points[i].x>>selected_array_points[i].y;
	}

	 

	space_marking left_point = selected_array_points[0];
    space_marking right_point = selected_array_points[0];

	for(int i=1;i<n;i++)
    {
        if(left_point.x>selected_array_points[i].x)
        	left_point=selected_array_points[i];
        if(right_point.x<selected_array_points[i].x)
			right_point=selected_array_points[i];
	}

	cout<<"coordinates of nodes are ("<<left_point.x<<","<<left_point.y<<") "<<"\n";
	vector<space_marking> leftpoints = taking_answer(left_point,right_point,selected_array_points);

	quick_hull(leftpoints,left_point,right_point);

	cout<<"coordinate of nodes are ("<<right_point.x<<","<<right_point.y<<") "<<"\n";
	vector<space_marking> rightpoints = taking_answer(right_point,left_point,selected_array_points);

	quick_hull(rightpoints,right_point,left_point);
}
